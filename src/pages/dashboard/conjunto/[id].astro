---
import Layout from '../../../layouts/Layout.astro';
import axios from 'axios'; // Importamos axios
const { id } = Astro.params;
console.log('ID:', id); // Imprime el ID en la consola


---

<Layout title="Datos del Conjunto - Carnaval de Oruro 2025">
  <main class="min-h-screen bg-gradient-to-br from-purple-600 via-red-500 to-yellow-500">
    <div class="container mx-auto px-4 py-8 max-w-md">
      <div class="bg-white rounded-3xl shadow-xl p-6 min-h-[80vh]">
        <header class="mb-8">
          <button
            class="mb-4 text-gray-600 hover:text-gray-800 transition-colors"
            onclick="history.back()"
          >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
            </svg>
          </button>
          <h1 id="nombreConjunto" class="text-2xl font-bold text-gray-800">
            Cargando...
          </h1>
        </header>

        <form id="conjuntoForm" class="space-y-6">
          <input type="hidden" id="conjuntoId" value={id}>
          <div class="space-y-2">
            <label for="integrantes" class="block text-sm font-medium text-gray-700">
              Número de Integrantes
            </label>
            <input
              type="number"
              id="integrantes"
              name="integrantes"
              class="block w-full px-4 py-3 rounded-xl bg-gray-50 border border-gray-200 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 transition-colors"
              required
            />
          </div>

          <div class="space-y-2">
            <label for="bloques" class="block text-sm font-medium text-gray-700">
              Número de Bloques
            </label>
            <input
              type="number"
              id="bloques"
              name="bloques"
              class="block w-full px-4 py-3 rounded-xl bg-gray-50 border border-gray-200 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 transition-colors"
              required
            />
          </div>
          <h2>Bandas Agregadas a la Fraternidad</h2>
          <ul id="bandasList">
          </ul>

          <button
            type="button"
            id="btnAgregarBanda"
            class="w-full py-3 px-6 text-purple-600 bg-purple-50 rounded-xl hover:bg-purple-100 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition-colors duration-200 flex items-center justify-center gap-2"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
            </svg>
            Agregar Banda
          </button>

          <button
            type="submit"
            class="w-full py-3 px-6 text-white bg-purple-600 rounded-xl hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition-colors duration-200 mt-8"
          >
            Guardar Datos
          </button>
        </form>
      </div>
    </div>
  </main>
</Layout>

<script>
  import axios, { AxiosError } from 'axios';
  

  document.addEventListener('DOMContentLoaded', () => {
    const userId = localStorage.getItem('userId');
    const ubicacion = localStorage.getItem('ubicacionConteo');
    const conjuntoIdInput = document.getElementById('conjuntoId') as HTMLInputElement;
    const id = conjuntoIdInput?.value;

    async function cargarConjunto() {
      try {
        const nombreConjuntoElement = document.getElementById('nombreConjunto');
        const integrantesInput = document.getElementById('integrantes') as HTMLInputElement;
        const bloquesInput = document.getElementById('bloques') as HTMLInputElement;

        if (nombreConjuntoElement && id) {
          const response = await axios.get(`http://127.0.0.1:8000/api/v1/fraternidades/${id}`);
          nombreConjuntoElement.textContent = response.data.nombre;

          if (integrantesInput && response.data.integrantes) {
            integrantesInput.value = response.data.integrantes;
          }
          if (bloquesInput && response.data.bloques) {
            bloquesInput.value = response.data.bloques;
          }
        }
      } catch (error) {
        console.error('Error al cargar el conjunto:', error);
      }
    }

    const conjuntoForm = document.getElementById('conjuntoForm');
    conjuntoForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      console.log('Enviando formulario...');

      const integrantesInput = document.getElementById('integrantes') as HTMLInputElement;
      const bloquesInput = document.getElementById('bloques') as HTMLInputElement;

      if (id && integrantesInput && bloquesInput) {
        const formData = {
          fraternidad_id: id,
          cantidad_integrantes: integrantesInput.value,
          bloques: bloquesInput.value,
          ubicacion: ubicacion,
          contador_id: userId,
          turno: '',
        };
        console.log('Datos del formulario:', formData);

        const authToken = localStorage.getItem('authToken');
        console.log('Token:', authToken); // Imprime el token en la consola
        if (!authToken) {
          alert('Token de autenticación no encontrado.');
          return;
        }
        axios.defaults.headers.common['Authorization'] = `Bearer ${authToken}`;
        console.log('Encabezado de autorización:', axios.defaults.headers.common['Authorization']); // Imprime el encabezado en la consola
        axios.defaults.headers.common['Accept'] = 'application/json';

        try {
          const response = await axios.post(`http://127.0.0.1:8000/api/v1/conteos`, formData);

          if (response.status === 201 || response.status === 200) {
            alert('Datos guardados correctamente');
            console.log('Respuesta del servidor:', response.data);
          } else {
            alert('Error inesperado: No se pudieron guardar los datos.');
          }
        } catch (error) {
          if (axios.isAxiosError(error)) {
            // Error de Axios
            console.error('Error de Axios al guardar los datos:', error.response?.data || error.message);
            alert(`Error al guardar los datos: ${error.response?.data?.message || error.message}`);
          } else {
            // Otro tipo de error
            console.error('Error desconocido al guardar los datos:', error);
            alert('Error desconocido al guardar los datos.');
          }
        }
      }
    });

    const btnAgregarBanda = document.getElementById('btnAgregarBanda');
    btnAgregarBanda?.addEventListener('click', () => {
      if (id) {
        window.location.href = `/dashboard/conjunto/${id}/banda`;
      }
    });

    cargarConjunto();
  });

  async function fetchBands() {
    interface Banda {
  nombre: string;
  integrantes: number;
  // Agrega otras propiedades de banda según sea necesario
}
    const authToken = localStorage.getItem('authToken');
    console.log('Token:', authToken);
    const conjuntoIdInput = document.getElementById('conjuntoId') as HTMLInputElement;
    const id = conjuntoIdInput?.value;

    if (authToken) {
      try {
        const response = await axios.get(`http://127.0.0.1:8000/api/v1/fraternidades/${id}/bandas`, {
          headers: {
            Authorization: `Bearer ${authToken}`,
            Accept: 'application/json',
          },
        });
        console.log('Bandas:', response.data); // Muestra los datos en la consola del navegador
        // Aquí puedes manejar los datos, por ejemplo, asignarlos a una variable para renderizarlos en el template
        renderBands(response.data);
      } catch (error) {
        console.error('Error al obtener bandas:', error);
      }
    } else {
      console.warn('Usuario no autenticado');
    }
    function renderBands(bandas: Banda[]) {
      const bandasList = document.getElementById('bandasList')!;
      bandasList.innerHTML = ''; // Limpia la lista antes de añadir nuevas bandas

      if (bandas.length > 0) {
        bandas.forEach(banda => {
          const li = document.createElement('li');
          li.textContent = `${banda.nombre} - Integrantes: ${banda.integrantes}`;
          bandasList.appendChild(li);
        });
      } else {
        const li = document.createElement('li');
        li.textContent = 'No se encontraron bandas para este conjunto.';
        bandasList.appendChild(li);
      }
    }
  }

  fetchBands(); // Llama a la función para obtener las bandas
</script>