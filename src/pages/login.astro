---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Iniciar Sesión - Carnaval de Oruro 2025" showUserNav={false}>
  <main class="min-h-screen bg-gradient-to-br from-yellow-400 via-red-500 to-pink-500 flex items-center justify-center p-4">
    <div class="bg-white rounded-3xl shadow-xl p-8 w-full max-w-md">
      <h1 class="text-3xl font-bold text-center text-purple-600 mb-6">Iniciar Sesión</h1>
      <p class="text-gray-600 text-center text-sm mb-8">Carnaval de Oruro 2025</p>
      
      <form id="loginForm" class="space-y-6">
        <div>
          <label for="email" class="block text-sm font-medium text-gray-700 mb-1">
            Correo electrónico
          </label>
          <input 
            type="email" 
            id="email" 
            name="email" 
            required 
            class="w-full px-4 py-3 rounded-xl bg-gray-50 border border-gray-200 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 transition-colors"
          />
        </div>
        
        <div>
          <label for="password" class="block text-sm font-medium text-gray-700 mb-1">
            Contraseña
          </label>
          <input 
            type="password" 
            id="password" 
            name="password" 
            required 
            class="w-full px-4 py-3 rounded-xl bg-gray-50 border border-gray-200 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 transition-colors"
          />
        </div>
        
        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <input 
              id="remember-me" 
              name="remember-me" 
              type="checkbox" 
              class="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
            />
            <label for="remember-me" class="ml-2 block text-sm text-gray-700">
              Recordarme
            </label>
          </div>
          
          <div class="text-sm">
            <a href="#" class="font-medium text-purple-600 hover:text-purple-500 transition-colors">
              ¿Olvidaste tu contraseña?
            </a>
          </div>
        </div>
        
        <button 
          type="submit" 
          class="w-full py-3 px-6 text-white bg-purple-600 rounded-xl hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition-colors duration-200"
        >
          Iniciar Sesión
        </button>
        
        <div id="error-message" class="text-red-500 text-sm text-center hidden"></div>
        <div id="success-message" class="text-green-500 text-sm text-center hidden"></div>
      </form>
    </div>
  </main>
</Layout>

  <script>
    // Importamos axios ya que está instalado en el proyecto
    import axios from 'axios';

    // Script para manejar el inicio de sesión
    document.addEventListener('DOMContentLoaded', () => {
      const loginForm = document.getElementById('loginForm');
      const errorMessageElement = document.getElementById('error-message');
      const successMessageElement = document.getElementById('success-message');
      
      // Verificando que los elementos existan
      if (!loginForm) {
        console.error('No se pudo encontrar el formulario de login');
        return;
      }

      if (!errorMessageElement) {
        console.error('No se pudo encontrar el elemento de mensaje de error');
        return;
      }

      if (!successMessageElement) {
        console.error('No se pudo encontrar el elemento de mensaje de éxito');
        return;
      }

      loginForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // Ocultar mensajes previos
        errorMessageElement.classList.add('hidden');
        successMessageElement.classList.add('hidden');
        
        // Obtener datos del formulario con tipado correcto
        const emailInput = document.getElementById('email') as HTMLInputElement;
        const passwordInput = document.getElementById('password') as HTMLInputElement;
        
        if (!emailInput || !passwordInput) {
          console.error('No se pudieron encontrar los campos del formulario');
          return;
        }
        
        const email = emailInput.value;
        const password = passwordInput.value;
        
        try {
          // Llamada a la API mediante Axios
          const response = await axios.post('http://127.0.0.1:8000/api/v1/auth/login', {
            email,
            password
          });
          
          // Manejar respuesta exitosa
          console.log('Login exitoso:', response.data);
          
          // Mostrar mensaje de éxito
          successMessageElement.textContent = '¡Inicio de sesión exitoso!';
          successMessageElement.classList.remove('hidden');
          
          // Guardar el token en localStorage
          if (response.data && response.data.token) {
              localStorage.setItem('authToken', response.data.token);
              localStorage.setItem('userId', response.data.user.id);
              
              // Llamar a la función para redirigir
              redirigirPostLogin();
              
              function redirigirPostLogin() {
                  const ubicacion = localStorage.getItem('ubicacionSeleccionada');
                  
                  if (!ubicacion) {
                      // Redirigir a la página de selección de ubicación
                      window.location.href = '/dashboard/seleccion-ubicacion';
                  } else {
                      // Redirigir al dashboard
                      window.location.href = '/dashboard';
                  }
              }
          }
        } catch (error: any) {
          // Manejar errores con tipado mejorado
          console.error('Error al iniciar sesión:', error);
          
          // Mostrar mensaje de error
          let mensajeError = 'Ha ocurrido un error al iniciar sesión.';
          
          if (error.response) {
            // Si el servidor respondió con un error
            if (error.response.data && error.response.data.message) {
              mensajeError = error.response.data.message;
            } else {
              mensajeError = `Error ${error.response.status}: ${error.response.statusText}`;
            }
          } else if (error.request) {
            // Si la solicitud se realizó pero no se recibió respuesta
            mensajeError = 'No se recibió respuesta del servidor. Verifica tu conexión.';
          } else if (error.message) {
            // Otros tipos de error
            mensajeError = error.message;
          }
          
          errorMessageElement.textContent = mensajeError;
          errorMessageElement.classList.remove('hidden');
        }
      });
    });
  </script>
</body>
</html>